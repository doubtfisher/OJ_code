题目：
小东所在公司要发年终奖，而小东恰好获得了最高福利，他要在公司年会上参与一个抽奖游戏，游戏在一个6*6的棋盘上进行，上面放着36个价值不等的礼物，每个小的棋盘上面放置着一个礼物，他需要从左上角开始游戏，每次只能向下或者向右移动一步，到达右下角停止，一路上的格子里的礼物小东都能拿到，请设计一个算法使小东拿到价值最高的礼物。
给定一个6*6的矩阵board，其中每个元素为对应格子的礼物价值,左上角为[0,0],请返回能获得的最大价值，保证每个礼物价值大于100小于1000。


代码实现：

class Bonus {
public:
    int getMost(vector<vector<int> > board) {
        int length1=board.size();
        int length2=board[0].size();
        vector<vector<int>> v(length1,vector<int>(length2,0));//存放礼物价值的数组
        v[0][0]=board[0][0];
        
        for(int i=0;i<length1;i++)
        {
            for(int j=0;j<length2;j++)
            {
                if(i==0&&j==0)//如果是起点坐标，则不作任何处理
                    continue;
                //如果走在行的临界边，则只能往右走，向右走的时候该点就要将后面的值加起来
                else if(i==0)
                {
                    v[i][j]=v[i][j-1]+board[i][j];
                }
                //如果走在列的临界边，则只能往下走，向下走的时候该点就要将上面的值加起来
                else if(j==0)
                {
                    v[i][j]=v[i-1][j]+board[i][j];
                }
                else
                {
                    //除去两个临界边，剩下的就是既能向右走，也能向下走，
                    //这时候就要考虑走到当前点的所有可能得情况，也就是走到当前点
                    //各自路径的和是不是这些所有到达该点路径当中最大的了。
                    v[i][j]=max(v[i-1][j],v[i][j-1])+board[i][j];
                }
            }
        }
        // 返回最后一个坐标点的值，它就表示从左上角走到右下角的最大奖励
        return v[length1-1][length2-1];
    }
};